-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Choc/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListTopDef                              (4)
	TopDef -> Type Ident '(' ListArg ')' Block         (5)
	ListTopDef -> TopDef                               (6)
	ListTopDef -> TopDef ListTopDef                    (7)
	Arg -> Type Ident                                  (8)
	Arg -> Type '&' Ident                              (9)
	ListArg ->                                         (10)
	ListArg -> Arg                                     (11)
	ListArg -> Arg ',' ListArg                         (12)
	Block -> '{' ListStmt '}'                          (13)
	ListStmt ->                                        (14)
	ListStmt -> Stmt ListStmt                          (15)
	Stmt -> ';'                                        (16)
	Stmt -> Block                                      (17)
	Stmt -> Type ListItem ';'                          (18)
	Stmt -> Ident '=' Expr ';'                         (19)
	Stmt -> Ident '++' ';'                             (20)
	Stmt -> Ident '--' ';'                             (21)
	Stmt -> 'return' Expr ';'                          (22)
	Stmt -> 'return' ';'                               (23)
	Stmt -> 'if' '(' Expr ')' Block                    (24)
	Stmt -> 'if' '(' Expr ')' Block 'else' Block       (25)
	Stmt -> 'while' '(' Expr ')' Block                 (26)
	Stmt -> Expr ';'                                   (27)
	Stmt -> 'break'                                    (28)
	Stmt -> 'continue'                                 (29)
	Stmt -> TopDef ';'                                 (30)
	Stmt -> 'print' '(' Expr ')' ';'                   (31)
	Item -> Ident                                      (32)
	Item -> Ident '=' Expr                             (33)
	ListItem -> Item                                   (34)
	ListItem -> Item ',' ListItem                      (35)
	Type -> 'int'                                      (36)
	Type -> 'string'                                   (37)
	Type -> 'boolean'                                  (38)
	Type -> 'void'                                     (39)
	Type -> 'function' '<' Type '(' ListType ')' '>'   (40)
	ListType ->                                        (41)
	ListType -> Type                                   (42)
	ListType -> Type ',' ListType                      (43)
	Expr6 -> Ident                                     (44)
	Expr6 -> Integer                                   (45)
	Expr6 -> 'true'                                    (46)
	Expr6 -> 'false'                                   (47)
	Expr6 -> Ident '(' ListExpr ')'                    (48)
	Expr6 -> String                                    (49)
	Expr6 -> '(' Expr ')'                              (50)
	Expr5 -> '-' Expr6                                 (51)
	Expr5 -> '!' Expr6                                 (52)
	Expr5 -> Expr6                                     (53)
	Expr4 -> Expr4 MulOp Expr5                         (54)
	Expr4 -> Expr5                                     (55)
	Expr3 -> Expr3 AddOp Expr4                         (56)
	Expr3 -> Expr4                                     (57)
	Expr2 -> Expr2 RelOp Expr3                         (58)
	Expr2 -> Expr3                                     (59)
	Expr1 -> Expr2 '&&' Expr1                          (60)
	Expr1 -> Expr2                                     (61)
	Expr -> Expr1 '||' Expr                            (62)
	Expr -> Lambda                                     (63)
	Expr -> Expr1                                      (64)
	ListExpr ->                                        (65)
	ListExpr -> Expr                                   (66)
	ListExpr -> Expr ',' ListExpr                      (67)
	Lambda -> 'lambda' '<' Type '(' ListArg ')' '>' Block   (68)
	AddOp -> '+'                                       (69)
	AddOp -> '-'                                       (70)
	MulOp -> '*'                                       (71)
	MulOp -> '/'                                       (72)
	MulOp -> '%'                                       (73)
	RelOp -> '<'                                       (74)
	RelOp -> '<='                                      (75)
	RelOp -> '>'                                       (76)
	RelOp -> '>='                                      (77)
	RelOp -> '=='                                      (78)
	RelOp -> '!='                                      (79)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&'            { PT _ (TS _ 4) }
	'&&'           { PT _ (TS _ 5) }
	'('            { PT _ (TS _ 6) }
	')'            { PT _ (TS _ 7) }
	'*'            { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'++'           { PT _ (TS _ 10) }
	','            { PT _ (TS _ 11) }
	'-'            { PT _ (TS _ 12) }
	'--'           { PT _ (TS _ 13) }
	'/'            { PT _ (TS _ 14) }
	';'            { PT _ (TS _ 15) }
	'<'            { PT _ (TS _ 16) }
	'<='           { PT _ (TS _ 17) }
	'='            { PT _ (TS _ 18) }
	'=='           { PT _ (TS _ 19) }
	'>'            { PT _ (TS _ 20) }
	'>='           { PT _ (TS _ 21) }
	'boolean'      { PT _ (TS _ 22) }
	'break'        { PT _ (TS _ 23) }
	'continue'     { PT _ (TS _ 24) }
	'else'         { PT _ (TS _ 25) }
	'false'        { PT _ (TS _ 26) }
	'function'     { PT _ (TS _ 27) }
	'if'           { PT _ (TS _ 28) }
	'int'          { PT _ (TS _ 29) }
	'lambda'       { PT _ (TS _ 30) }
	'print'        { PT _ (TS _ 31) }
	'return'       { PT _ (TS _ 32) }
	'string'       { PT _ (TS _ 33) }
	'true'         { PT _ (TS _ 34) }
	'void'         { PT _ (TS _ 35) }
	'while'        { PT _ (TS _ 36) }
	'{'            { PT _ (TS _ 37) }
	'||'           { PT _ (TS _ 38) }
	'}'            { PT _ (TS _ 39) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	TopDef          rule  5
	ListTopDef      rules 6, 7
	Arg             rules 8, 9
	ListArg         rules 10, 11, 12
	Block           rule  13
	ListStmt        rules 14, 15
	Stmt            rules 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
	Item            rules 32, 33
	ListItem        rules 34, 35
	Type            rules 36, 37, 38, 39, 40
	ListType        rules 41, 42, 43
	Expr6           rules 44, 45, 46, 47, 48, 49, 50
	Expr5           rules 51, 52, 53
	Expr4           rules 54, 55
	Expr3           rules 56, 57
	Expr2           rules 58, 59
	Expr1           rules 60, 61
	Expr            rules 62, 63, 64
	ListExpr        rules 65, 66, 67
	Lambda          rule  68
	AddOp           rules 69, 70
	MulOp           rules 71, 72, 73
	RelOp           rules 74, 75, 76, 77, 78, 79

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Program        goto state 3
	TopDef         goto state 4
	ListTopDef     goto state 5
	Type           goto state 6

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'||'           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	ListTopDef -> TopDef .                              (rule 6)
	ListTopDef -> TopDef . ListTopDef                   (rule 7)

	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11
	%eof           reduce using rule 6

	TopDef         goto state 4
	ListTopDef     goto state 14
	Type           goto state 6

State 5

	Program -> ListTopDef .                             (rule 4)

	%eof           reduce using rule 4


State 6

	TopDef -> Type . Ident '(' ListArg ')' Block        (rule 5)

	L_Ident        shift, and enter state 2

	Ident          goto state 13

State 7

	Type -> 'boolean' .                                 (rule 38)

	'&'            reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	L_Ident        reduce using rule 38


State 8

	Type -> 'function' . '<' Type '(' ListType ')' '>'    (rule 40)

	'<'            shift, and enter state 12


State 9

	Type -> 'int' .                                     (rule 36)

	'&'            reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	L_Ident        reduce using rule 36


State 10

	Type -> 'string' .                                  (rule 37)

	'&'            reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	L_Ident        reduce using rule 37


State 11

	Type -> 'void' .                                    (rule 39)

	'&'            reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	L_Ident        reduce using rule 39


State 12

	Type -> 'function' '<' . Type '(' ListType ')' '>'    (rule 40)

	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Type           goto state 16

State 13

	TopDef -> Type Ident . '(' ListArg ')' Block        (rule 5)

	'('            shift, and enter state 15


State 14

	ListTopDef -> TopDef ListTopDef .                   (rule 7)

	%eof           reduce using rule 7


State 15

	TopDef -> Type Ident '(' . ListArg ')' Block        (rule 5)

	')'            reduce using rule 10
	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Arg            goto state 18
	ListArg        goto state 19
	Type           goto state 20

State 16

	Type -> 'function' '<' Type . '(' ListType ')' '>'    (rule 40)

	'('            shift, and enter state 17


State 17

	Type -> 'function' '<' Type '(' . ListType ')' '>'    (rule 40)

	')'            reduce using rule 41
	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Type           goto state 25
	ListType       goto state 26

State 18

	ListArg -> Arg .                                    (rule 11)
	ListArg -> Arg . ',' ListArg                        (rule 12)

	')'            reduce using rule 11
	','            shift, and enter state 24


State 19

	TopDef -> Type Ident '(' ListArg . ')' Block        (rule 5)

	')'            shift, and enter state 23


State 20

	Arg -> Type . Ident                                 (rule 8)
	Arg -> Type . '&' Ident                             (rule 9)

	'&'            shift, and enter state 22
	L_Ident        shift, and enter state 2

	Ident          goto state 21

State 21

	Arg -> Type Ident .                                 (rule 8)

	')'            reduce using rule 8
	','            reduce using rule 8


State 22

	Arg -> Type '&' . Ident                             (rule 9)

	L_Ident        shift, and enter state 2

	Ident          goto state 32

State 23

	TopDef -> Type Ident '(' ListArg ')' . Block        (rule 5)

	'{'            shift, and enter state 31

	Block          goto state 30

State 24

	ListArg -> Arg ',' . ListArg                        (rule 12)

	')'            reduce using rule 10
	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Arg            goto state 18
	ListArg        goto state 29
	Type           goto state 20

State 25

	ListType -> Type .                                  (rule 42)
	ListType -> Type . ',' ListType                     (rule 43)

	')'            reduce using rule 42
	','            shift, and enter state 28


State 26

	Type -> 'function' '<' Type '(' ListType . ')' '>'    (rule 40)

	')'            shift, and enter state 27


State 27

	Type -> 'function' '<' Type '(' ListType ')' . '>'    (rule 40)

	'>'            shift, and enter state 65


State 28

	ListType -> Type ',' . ListType                     (rule 43)

	')'            reduce using rule 41
	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Type           goto state 25
	ListType       goto state 64

State 29

	ListArg -> Arg ',' ListArg .                        (rule 12)

	')'            reduce using rule 12


State 30

	TopDef -> Type Ident '(' ListArg ')' Block .        (rule 5)

	';'            reduce using rule 5
	'boolean'      reduce using rule 5
	'function'     reduce using rule 5
	'int'          reduce using rule 5
	'string'       reduce using rule 5
	'void'         reduce using rule 5
	%eof           reduce using rule 5


State 31

	Block -> '{' . ListStmt '}'                         (rule 13)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	';'            shift, and enter state 52
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 53
	'continue'     shift, and enter state 54
	'false'        shift, and enter state 55
	'function'     shift, and enter state 8
	'if'           shift, and enter state 56
	'int'          shift, and enter state 9
	'lambda'       shift, and enter state 57
	'print'        shift, and enter state 58
	'return'       shift, and enter state 59
	'string'       shift, and enter state 10
	'true'         shift, and enter state 60
	'void'         shift, and enter state 11
	'while'        shift, and enter state 61
	'{'            shift, and enter state 31
	'}'            reduce using rule 14
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 33
	Integer        goto state 34
	String         goto state 35
	TopDef         goto state 36
	Block          goto state 37
	ListStmt       goto state 38
	Stmt           goto state 39
	Type           goto state 40
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 47
	Lambda         goto state 48

State 32

	Arg -> Type '&' Ident .                             (rule 9)

	')'            reduce using rule 9
	','            reduce using rule 9


State 33

	Stmt -> Ident . '=' Expr ';'                        (rule 19)
	Stmt -> Ident . '++' ';'                            (rule 20)
	Stmt -> Ident . '--' ';'                            (rule 21)
	Expr6 -> Ident .                                    (rule 44)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 48)

	'!='           reduce using rule 44
	'%'            reduce using rule 44
	'&&'           reduce using rule 44
	'('            shift, and enter state 99
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	'++'           shift, and enter state 100
	'-'            reduce using rule 44
	'--'           shift, and enter state 101
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'='            shift, and enter state 102
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'||'           reduce using rule 44


State 34

	Expr6 -> Integer .                                  (rule 45)

	'!='           reduce using rule 45
	'%'            reduce using rule 45
	'&&'           reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'||'           reduce using rule 45


State 35

	Expr6 -> String .                                   (rule 49)

	'!='           reduce using rule 49
	'%'            reduce using rule 49
	'&&'           reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'||'           reduce using rule 49


State 36

	Stmt -> TopDef . ';'                                (rule 30)

	';'            shift, and enter state 98


State 37

	Stmt -> Block .                                     (rule 17)

	'!'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'boolean'      reduce using rule 17
	'break'        reduce using rule 17
	'continue'     reduce using rule 17
	'false'        reduce using rule 17
	'function'     reduce using rule 17
	'if'           reduce using rule 17
	'int'          reduce using rule 17
	'lambda'       reduce using rule 17
	'print'        reduce using rule 17
	'return'       reduce using rule 17
	'string'       reduce using rule 17
	'true'         reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17


State 38

	Block -> '{' ListStmt . '}'                         (rule 13)

	'}'            shift, and enter state 97


State 39

	ListStmt -> Stmt . ListStmt                         (rule 15)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	';'            shift, and enter state 52
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 53
	'continue'     shift, and enter state 54
	'false'        shift, and enter state 55
	'function'     shift, and enter state 8
	'if'           shift, and enter state 56
	'int'          shift, and enter state 9
	'lambda'       shift, and enter state 57
	'print'        shift, and enter state 58
	'return'       shift, and enter state 59
	'string'       shift, and enter state 10
	'true'         shift, and enter state 60
	'void'         shift, and enter state 11
	'while'        shift, and enter state 61
	'{'            shift, and enter state 31
	'}'            reduce using rule 14
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 33
	Integer        goto state 34
	String         goto state 35
	TopDef         goto state 36
	Block          goto state 37
	ListStmt       goto state 96
	Stmt           goto state 39
	Type           goto state 40
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 47
	Lambda         goto state 48

State 40

	TopDef -> Type . Ident '(' ListArg ')' Block        (rule 5)
	Stmt -> Type . ListItem ';'                         (rule 18)

	L_Ident        shift, and enter state 2

	Ident          goto state 93
	Item           goto state 94
	ListItem       goto state 95

State 41

	Expr5 -> Expr6 .                                    (rule 53)

	'!='           reduce using rule 53
	'%'            reduce using rule 53
	'&&'           reduce using rule 53
	')'            reduce using rule 53
	'*'            reduce using rule 53
	'+'            reduce using rule 53
	','            reduce using rule 53
	'-'            reduce using rule 53
	'/'            reduce using rule 53
	';'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'||'           reduce using rule 53


State 42

	Expr4 -> Expr5 .                                    (rule 55)

	'!='           reduce using rule 55
	'%'            reduce using rule 55
	'&&'           reduce using rule 55
	')'            reduce using rule 55
	'*'            reduce using rule 55
	'+'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'/'            reduce using rule 55
	';'            reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'||'           reduce using rule 55


State 43

	Expr4 -> Expr4 . MulOp Expr5                        (rule 54)
	Expr3 -> Expr4 .                                    (rule 57)

	'!='           reduce using rule 57
	'%'            shift, and enter state 90
	'&&'           reduce using rule 57
	')'            reduce using rule 57
	'*'            shift, and enter state 91
	'+'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'/'            shift, and enter state 92
	';'            reduce using rule 57
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'=='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'||'           reduce using rule 57

	MulOp          goto state 89

State 44

	Expr3 -> Expr3 . AddOp Expr4                        (rule 56)
	Expr2 -> Expr3 .                                    (rule 59)

	'!='           reduce using rule 59
	'&&'           reduce using rule 59
	')'            reduce using rule 59
	'+'            shift, and enter state 87
	','            reduce using rule 59
	'-'            shift, and enter state 88
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'||'           reduce using rule 59

	AddOp          goto state 86

State 45

	Expr2 -> Expr2 . RelOp Expr3                        (rule 58)
	Expr1 -> Expr2 . '&&' Expr1                         (rule 60)
	Expr1 -> Expr2 .                                    (rule 61)

	'!='           shift, and enter state 79
	'&&'           shift, and enter state 80
	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'||'           reduce using rule 61

	RelOp          goto state 78

State 46

	Expr -> Expr1 . '||' Expr                           (rule 62)
	Expr -> Expr1 .                                     (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	';'            reduce using rule 64
	'||'           shift, and enter state 77


State 47

	Stmt -> Expr . ';'                                  (rule 27)

	';'            shift, and enter state 76


State 48

	Expr -> Lambda .                                    (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	';'            reduce using rule 63


State 49

	Expr5 -> '!' . Expr6                                (rule 52)

	'('            shift, and enter state 50
	'false'        shift, and enter state 55
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 75

State 50

	Expr6 -> '(' . Expr ')'                             (rule 50)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 74
	Lambda         goto state 48

State 51

	Expr5 -> '-' . Expr6                                (rule 51)

	'('            shift, and enter state 50
	'false'        shift, and enter state 55
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 73

State 52

	Stmt -> ';' .                                       (rule 16)

	'!'            reduce using rule 16
	'('            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'boolean'      reduce using rule 16
	'break'        reduce using rule 16
	'continue'     reduce using rule 16
	'false'        reduce using rule 16
	'function'     reduce using rule 16
	'if'           reduce using rule 16
	'int'          reduce using rule 16
	'lambda'       reduce using rule 16
	'print'        reduce using rule 16
	'return'       reduce using rule 16
	'string'       reduce using rule 16
	'true'         reduce using rule 16
	'void'         reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16


State 53

	Stmt -> 'break' .                                   (rule 28)

	'!'            reduce using rule 28
	'('            reduce using rule 28
	'-'            reduce using rule 28
	';'            reduce using rule 28
	'boolean'      reduce using rule 28
	'break'        reduce using rule 28
	'continue'     reduce using rule 28
	'false'        reduce using rule 28
	'function'     reduce using rule 28
	'if'           reduce using rule 28
	'int'          reduce using rule 28
	'lambda'       reduce using rule 28
	'print'        reduce using rule 28
	'return'       reduce using rule 28
	'string'       reduce using rule 28
	'true'         reduce using rule 28
	'void'         reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	L_Ident        reduce using rule 28
	L_integ        reduce using rule 28
	L_quoted       reduce using rule 28


State 54

	Stmt -> 'continue' .                                (rule 29)

	'!'            reduce using rule 29
	'('            reduce using rule 29
	'-'            reduce using rule 29
	';'            reduce using rule 29
	'boolean'      reduce using rule 29
	'break'        reduce using rule 29
	'continue'     reduce using rule 29
	'false'        reduce using rule 29
	'function'     reduce using rule 29
	'if'           reduce using rule 29
	'int'          reduce using rule 29
	'lambda'       reduce using rule 29
	'print'        reduce using rule 29
	'return'       reduce using rule 29
	'string'       reduce using rule 29
	'true'         reduce using rule 29
	'void'         reduce using rule 29
	'while'        reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	L_Ident        reduce using rule 29
	L_integ        reduce using rule 29
	L_quoted       reduce using rule 29


State 55

	Expr6 -> 'false' .                                  (rule 47)

	'!='           reduce using rule 47
	'%'            reduce using rule 47
	'&&'           reduce using rule 47
	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'||'           reduce using rule 47


State 56

	Stmt -> 'if' . '(' Expr ')' Block                   (rule 24)
	Stmt -> 'if' . '(' Expr ')' Block 'else' Block      (rule 25)

	'('            shift, and enter state 72


State 57

	Lambda -> 'lambda' . '<' Type '(' ListArg ')' '>' Block    (rule 68)

	'<'            shift, and enter state 71


State 58

	Stmt -> 'print' . '(' Expr ')' ';'                  (rule 31)

	'('            shift, and enter state 70


State 59

	Stmt -> 'return' . Expr ';'                         (rule 22)
	Stmt -> 'return' . ';'                              (rule 23)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	';'            shift, and enter state 69
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 68
	Lambda         goto state 48

State 60

	Expr6 -> 'true' .                                   (rule 46)

	'!='           reduce using rule 46
	'%'            reduce using rule 46
	'&&'           reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'||'           reduce using rule 46


State 61

	Stmt -> 'while' . '(' Expr ')' Block                (rule 26)

	'('            shift, and enter state 66


State 62

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&&'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'||'           reduce using rule 2


State 63

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&&'           reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'||'           reduce using rule 3


State 64

	ListType -> Type ',' ListType .                     (rule 43)

	')'            reduce using rule 43


State 65

	Type -> 'function' '<' Type '(' ListType ')' '>' .    (rule 40)

	'&'            reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	L_Ident        reduce using rule 40


State 66

	Stmt -> 'while' '(' . Expr ')' Block                (rule 26)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 121
	Lambda         goto state 48

State 67

	Expr6 -> Ident .                                    (rule 44)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 48)

	'!='           reduce using rule 44
	'%'            reduce using rule 44
	'&&'           reduce using rule 44
	'('            shift, and enter state 99
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'||'           reduce using rule 44


State 68

	Stmt -> 'return' Expr . ';'                         (rule 22)

	';'            shift, and enter state 120


State 69

	Stmt -> 'return' ';' .                              (rule 23)

	'!'            reduce using rule 23
	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'boolean'      reduce using rule 23
	'break'        reduce using rule 23
	'continue'     reduce using rule 23
	'false'        reduce using rule 23
	'function'     reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'lambda'       reduce using rule 23
	'print'        reduce using rule 23
	'return'       reduce using rule 23
	'string'       reduce using rule 23
	'true'         reduce using rule 23
	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23


State 70

	Stmt -> 'print' '(' . Expr ')' ';'                  (rule 31)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 119
	Lambda         goto state 48

State 71

	Lambda -> 'lambda' '<' . Type '(' ListArg ')' '>' Block    (rule 68)

	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Type           goto state 118

State 72

	Stmt -> 'if' '(' . Expr ')' Block                   (rule 24)
	Stmt -> 'if' '(' . Expr ')' Block 'else' Block      (rule 25)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 117
	Lambda         goto state 48

State 73

	Expr5 -> '-' Expr6 .                                (rule 51)

	'!='           reduce using rule 51
	'%'            reduce using rule 51
	'&&'           reduce using rule 51
	')'            reduce using rule 51
	'*'            reduce using rule 51
	'+'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'/'            reduce using rule 51
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'||'           reduce using rule 51


State 74

	Expr6 -> '(' Expr . ')'                             (rule 50)

	')'            shift, and enter state 116


State 75

	Expr5 -> '!' Expr6 .                                (rule 52)

	'!='           reduce using rule 52
	'%'            reduce using rule 52
	'&&'           reduce using rule 52
	')'            reduce using rule 52
	'*'            reduce using rule 52
	'+'            reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'/'            reduce using rule 52
	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'||'           reduce using rule 52


State 76

	Stmt -> Expr ';' .                                  (rule 27)

	'!'            reduce using rule 27
	'('            reduce using rule 27
	'-'            reduce using rule 27
	';'            reduce using rule 27
	'boolean'      reduce using rule 27
	'break'        reduce using rule 27
	'continue'     reduce using rule 27
	'false'        reduce using rule 27
	'function'     reduce using rule 27
	'if'           reduce using rule 27
	'int'          reduce using rule 27
	'lambda'       reduce using rule 27
	'print'        reduce using rule 27
	'return'       reduce using rule 27
	'string'       reduce using rule 27
	'true'         reduce using rule 27
	'void'         reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	L_Ident        reduce using rule 27
	L_integ        reduce using rule 27
	L_quoted       reduce using rule 27


State 77

	Expr -> Expr1 '||' . Expr                           (rule 62)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 115
	Lambda         goto state 48

State 78

	Expr2 -> Expr2 RelOp . Expr3                        (rule 58)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 114

State 79

	RelOp -> '!=' .                                     (rule 79)

	'!'            reduce using rule 79
	'('            reduce using rule 79
	'-'            reduce using rule 79
	'false'        reduce using rule 79
	'true'         reduce using rule 79
	L_Ident        reduce using rule 79
	L_integ        reduce using rule 79
	L_quoted       reduce using rule 79


State 80

	Expr1 -> Expr2 '&&' . Expr1                         (rule 60)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 113

State 81

	RelOp -> '<' .                                      (rule 74)

	'!'            reduce using rule 74
	'('            reduce using rule 74
	'-'            reduce using rule 74
	'false'        reduce using rule 74
	'true'         reduce using rule 74
	L_Ident        reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74


State 82

	RelOp -> '<=' .                                     (rule 75)

	'!'            reduce using rule 75
	'('            reduce using rule 75
	'-'            reduce using rule 75
	'false'        reduce using rule 75
	'true'         reduce using rule 75
	L_Ident        reduce using rule 75
	L_integ        reduce using rule 75
	L_quoted       reduce using rule 75


State 83

	RelOp -> '==' .                                     (rule 78)

	'!'            reduce using rule 78
	'('            reduce using rule 78
	'-'            reduce using rule 78
	'false'        reduce using rule 78
	'true'         reduce using rule 78
	L_Ident        reduce using rule 78
	L_integ        reduce using rule 78
	L_quoted       reduce using rule 78


State 84

	RelOp -> '>' .                                      (rule 76)

	'!'            reduce using rule 76
	'('            reduce using rule 76
	'-'            reduce using rule 76
	'false'        reduce using rule 76
	'true'         reduce using rule 76
	L_Ident        reduce using rule 76
	L_integ        reduce using rule 76
	L_quoted       reduce using rule 76


State 85

	RelOp -> '>=' .                                     (rule 77)

	'!'            reduce using rule 77
	'('            reduce using rule 77
	'-'            reduce using rule 77
	'false'        reduce using rule 77
	'true'         reduce using rule 77
	L_Ident        reduce using rule 77
	L_integ        reduce using rule 77
	L_quoted       reduce using rule 77


State 86

	Expr3 -> Expr3 AddOp . Expr4                        (rule 56)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 112

State 87

	AddOp -> '+' .                                      (rule 69)

	'!'            reduce using rule 69
	'('            reduce using rule 69
	'-'            reduce using rule 69
	'false'        reduce using rule 69
	'true'         reduce using rule 69
	L_Ident        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69


State 88

	AddOp -> '-' .                                      (rule 70)

	'!'            reduce using rule 70
	'('            reduce using rule 70
	'-'            reduce using rule 70
	'false'        reduce using rule 70
	'true'         reduce using rule 70
	L_Ident        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70


State 89

	Expr4 -> Expr4 MulOp . Expr5                        (rule 54)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 111

State 90

	MulOp -> '%' .                                      (rule 73)

	'!'            reduce using rule 73
	'('            reduce using rule 73
	'-'            reduce using rule 73
	'false'        reduce using rule 73
	'true'         reduce using rule 73
	L_Ident        reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73


State 91

	MulOp -> '*' .                                      (rule 71)

	'!'            reduce using rule 71
	'('            reduce using rule 71
	'-'            reduce using rule 71
	'false'        reduce using rule 71
	'true'         reduce using rule 71
	L_Ident        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71


State 92

	MulOp -> '/' .                                      (rule 72)

	'!'            reduce using rule 72
	'('            reduce using rule 72
	'-'            reduce using rule 72
	'false'        reduce using rule 72
	'true'         reduce using rule 72
	L_Ident        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72


State 93

	TopDef -> Type Ident . '(' ListArg ')' Block        (rule 5)
	Item -> Ident .                                     (rule 32)
	Item -> Ident . '=' Expr                            (rule 33)

	'('            shift, and enter state 15
	','            reduce using rule 32
	';'            reduce using rule 32
	'='            shift, and enter state 110


State 94

	ListItem -> Item .                                  (rule 34)
	ListItem -> Item . ',' ListItem                     (rule 35)

	','            shift, and enter state 109
	';'            reduce using rule 34


State 95

	Stmt -> Type ListItem . ';'                         (rule 18)

	';'            shift, and enter state 108


State 96

	ListStmt -> Stmt ListStmt .                         (rule 15)

	'}'            reduce using rule 15


State 97

	Block -> '{' ListStmt '}' .                         (rule 13)

	'!'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'boolean'      reduce using rule 13
	'break'        reduce using rule 13
	'continue'     reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'function'     reduce using rule 13
	'if'           reduce using rule 13
	'int'          reduce using rule 13
	'lambda'       reduce using rule 13
	'print'        reduce using rule 13
	'return'       reduce using rule 13
	'string'       reduce using rule 13
	'true'         reduce using rule 13
	'void'         reduce using rule 13
	'while'        reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 98

	Stmt -> TopDef ';' .                                (rule 30)

	'!'            reduce using rule 30
	'('            reduce using rule 30
	'-'            reduce using rule 30
	';'            reduce using rule 30
	'boolean'      reduce using rule 30
	'break'        reduce using rule 30
	'continue'     reduce using rule 30
	'false'        reduce using rule 30
	'function'     reduce using rule 30
	'if'           reduce using rule 30
	'int'          reduce using rule 30
	'lambda'       reduce using rule 30
	'print'        reduce using rule 30
	'return'       reduce using rule 30
	'string'       reduce using rule 30
	'true'         reduce using rule 30
	'void'         reduce using rule 30
	'while'        reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	L_Ident        reduce using rule 30
	L_integ        reduce using rule 30
	L_quoted       reduce using rule 30


State 99

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 48)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	')'            reduce using rule 65
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 106
	ListExpr       goto state 107
	Lambda         goto state 48

State 100

	Stmt -> Ident '++' . ';'                            (rule 20)

	';'            shift, and enter state 105


State 101

	Stmt -> Ident '--' . ';'                            (rule 21)

	';'            shift, and enter state 104


State 102

	Stmt -> Ident '=' . Expr ';'                        (rule 19)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 103
	Lambda         goto state 48

State 103

	Stmt -> Ident '=' Expr . ';'                        (rule 19)

	';'            shift, and enter state 131


State 104

	Stmt -> Ident '--' ';' .                            (rule 21)

	'!'            reduce using rule 21
	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'boolean'      reduce using rule 21
	'break'        reduce using rule 21
	'continue'     reduce using rule 21
	'false'        reduce using rule 21
	'function'     reduce using rule 21
	'if'           reduce using rule 21
	'int'          reduce using rule 21
	'lambda'       reduce using rule 21
	'print'        reduce using rule 21
	'return'       reduce using rule 21
	'string'       reduce using rule 21
	'true'         reduce using rule 21
	'void'         reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21


State 105

	Stmt -> Ident '++' ';' .                            (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'boolean'      reduce using rule 20
	'break'        reduce using rule 20
	'continue'     reduce using rule 20
	'false'        reduce using rule 20
	'function'     reduce using rule 20
	'if'           reduce using rule 20
	'int'          reduce using rule 20
	'lambda'       reduce using rule 20
	'print'        reduce using rule 20
	'return'       reduce using rule 20
	'string'       reduce using rule 20
	'true'         reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20


State 106

	ListExpr -> Expr .                                  (rule 66)
	ListExpr -> Expr . ',' ListExpr                     (rule 67)

	')'            reduce using rule 66
	','            shift, and enter state 130


State 107

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 48)

	')'            shift, and enter state 129


State 108

	Stmt -> Type ListItem ';' .                         (rule 18)

	'!'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'boolean'      reduce using rule 18
	'break'        reduce using rule 18
	'continue'     reduce using rule 18
	'false'        reduce using rule 18
	'function'     reduce using rule 18
	'if'           reduce using rule 18
	'int'          reduce using rule 18
	'lambda'       reduce using rule 18
	'print'        reduce using rule 18
	'return'       reduce using rule 18
	'string'       reduce using rule 18
	'true'         reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18


State 109

	ListItem -> Item ',' . ListItem                     (rule 35)

	L_Ident        shift, and enter state 2

	Ident          goto state 127
	Item           goto state 94
	ListItem       goto state 128

State 110

	Item -> Ident '=' . Expr                            (rule 33)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 126
	Lambda         goto state 48

State 111

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 54)

	'!='           reduce using rule 54
	'%'            reduce using rule 54
	'&&'           reduce using rule 54
	')'            reduce using rule 54
	'*'            reduce using rule 54
	'+'            reduce using rule 54
	','            reduce using rule 54
	'-'            reduce using rule 54
	'/'            reduce using rule 54
	';'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'||'           reduce using rule 54


State 112

	Expr4 -> Expr4 . MulOp Expr5                        (rule 54)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 56)

	'!='           reduce using rule 56
	'%'            shift, and enter state 90
	'&&'           reduce using rule 56
	')'            reduce using rule 56
	'*'            shift, and enter state 91
	'+'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'/'            shift, and enter state 92
	';'            reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'||'           reduce using rule 56

	MulOp          goto state 89

State 113

	Expr1 -> Expr2 '&&' Expr1 .                         (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	';'            reduce using rule 60
	'||'           reduce using rule 60


State 114

	Expr3 -> Expr3 . AddOp Expr4                        (rule 56)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 58)

	'!='           reduce using rule 58
	'&&'           reduce using rule 58
	')'            reduce using rule 58
	'+'            shift, and enter state 87
	','            reduce using rule 58
	'-'            shift, and enter state 88
	';'            reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'||'           reduce using rule 58

	AddOp          goto state 86

State 115

	Expr -> Expr1 '||' Expr .                           (rule 62)

	')'            reduce using rule 62
	','            reduce using rule 62
	';'            reduce using rule 62


State 116

	Expr6 -> '(' Expr ')' .                             (rule 50)

	'!='           reduce using rule 50
	'%'            reduce using rule 50
	'&&'           reduce using rule 50
	')'            reduce using rule 50
	'*'            reduce using rule 50
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            reduce using rule 50
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'||'           reduce using rule 50


State 117

	Stmt -> 'if' '(' Expr . ')' Block                   (rule 24)
	Stmt -> 'if' '(' Expr . ')' Block 'else' Block      (rule 25)

	')'            shift, and enter state 125


State 118

	Lambda -> 'lambda' '<' Type . '(' ListArg ')' '>' Block    (rule 68)

	'('            shift, and enter state 124


State 119

	Stmt -> 'print' '(' Expr . ')' ';'                  (rule 31)

	')'            shift, and enter state 123


State 120

	Stmt -> 'return' Expr ';' .                         (rule 22)

	'!'            reduce using rule 22
	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'boolean'      reduce using rule 22
	'break'        reduce using rule 22
	'continue'     reduce using rule 22
	'false'        reduce using rule 22
	'function'     reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'lambda'       reduce using rule 22
	'print'        reduce using rule 22
	'return'       reduce using rule 22
	'string'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_Ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22


State 121

	Stmt -> 'while' '(' Expr . ')' Block                (rule 26)

	')'            shift, and enter state 122


State 122

	Stmt -> 'while' '(' Expr ')' . Block                (rule 26)

	'{'            shift, and enter state 31

	Block          goto state 136

State 123

	Stmt -> 'print' '(' Expr ')' . ';'                  (rule 31)

	';'            shift, and enter state 135


State 124

	Lambda -> 'lambda' '<' Type '(' . ListArg ')' '>' Block    (rule 68)

	')'            reduce using rule 10
	'boolean'      shift, and enter state 7
	'function'     shift, and enter state 8
	'int'          shift, and enter state 9
	'string'       shift, and enter state 10
	'void'         shift, and enter state 11

	Arg            goto state 18
	ListArg        goto state 134
	Type           goto state 20

State 125

	Stmt -> 'if' '(' Expr ')' . Block                   (rule 24)
	Stmt -> 'if' '(' Expr ')' . Block 'else' Block      (rule 25)

	'{'            shift, and enter state 31

	Block          goto state 133

State 126

	Item -> Ident '=' Expr .                            (rule 33)

	','            reduce using rule 33
	';'            reduce using rule 33


State 127

	Item -> Ident .                                     (rule 32)
	Item -> Ident . '=' Expr                            (rule 33)

	','            reduce using rule 32
	';'            reduce using rule 32
	'='            shift, and enter state 110


State 128

	ListItem -> Item ',' ListItem .                     (rule 35)

	';'            reduce using rule 35


State 129

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 48)

	'!='           reduce using rule 48
	'%'            reduce using rule 48
	'&&'           reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'||'           reduce using rule 48


State 130

	ListExpr -> Expr ',' . ListExpr                     (rule 67)

	'!'            shift, and enter state 49
	'('            shift, and enter state 50
	')'            reduce using rule 65
	'-'            shift, and enter state 51
	'false'        shift, and enter state 55
	'lambda'       shift, and enter state 57
	'true'         shift, and enter state 60
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 62
	L_quoted       shift, and enter state 63

	Ident          goto state 67
	Integer        goto state 34
	String         goto state 35
	Expr6          goto state 41
	Expr5          goto state 42
	Expr4          goto state 43
	Expr3          goto state 44
	Expr2          goto state 45
	Expr1          goto state 46
	Expr           goto state 106
	ListExpr       goto state 132
	Lambda         goto state 48

State 131

	Stmt -> Ident '=' Expr ';' .                        (rule 19)

	'!'            reduce using rule 19
	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'boolean'      reduce using rule 19
	'break'        reduce using rule 19
	'continue'     reduce using rule 19
	'false'        reduce using rule 19
	'function'     reduce using rule 19
	'if'           reduce using rule 19
	'int'          reduce using rule 19
	'lambda'       reduce using rule 19
	'print'        reduce using rule 19
	'return'       reduce using rule 19
	'string'       reduce using rule 19
	'true'         reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19


State 132

	ListExpr -> Expr ',' ListExpr .                     (rule 67)

	')'            reduce using rule 67


State 133

	Stmt -> 'if' '(' Expr ')' Block .                   (rule 24)
	Stmt -> 'if' '(' Expr ')' Block . 'else' Block      (rule 25)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'boolean'      reduce using rule 24
	'break'        reduce using rule 24
	'continue'     reduce using rule 24
	'else'         shift, and enter state 138
	'false'        reduce using rule 24
	'function'     reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'lambda'       reduce using rule 24
	'print'        reduce using rule 24
	'return'       reduce using rule 24
	'string'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_Ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24


State 134

	Lambda -> 'lambda' '<' Type '(' ListArg . ')' '>' Block    (rule 68)

	')'            shift, and enter state 137


State 135

	Stmt -> 'print' '(' Expr ')' ';' .                  (rule 31)

	'!'            reduce using rule 31
	'('            reduce using rule 31
	'-'            reduce using rule 31
	';'            reduce using rule 31
	'boolean'      reduce using rule 31
	'break'        reduce using rule 31
	'continue'     reduce using rule 31
	'false'        reduce using rule 31
	'function'     reduce using rule 31
	'if'           reduce using rule 31
	'int'          reduce using rule 31
	'lambda'       reduce using rule 31
	'print'        reduce using rule 31
	'return'       reduce using rule 31
	'string'       reduce using rule 31
	'true'         reduce using rule 31
	'void'         reduce using rule 31
	'while'        reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	L_Ident        reduce using rule 31
	L_integ        reduce using rule 31
	L_quoted       reduce using rule 31


State 136

	Stmt -> 'while' '(' Expr ')' Block .                (rule 26)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'boolean'      reduce using rule 26
	'break'        reduce using rule 26
	'continue'     reduce using rule 26
	'false'        reduce using rule 26
	'function'     reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'lambda'       reduce using rule 26
	'print'        reduce using rule 26
	'return'       reduce using rule 26
	'string'       reduce using rule 26
	'true'         reduce using rule 26
	'void'         reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	L_Ident        reduce using rule 26
	L_integ        reduce using rule 26
	L_quoted       reduce using rule 26


State 137

	Lambda -> 'lambda' '<' Type '(' ListArg ')' . '>' Block    (rule 68)

	'>'            shift, and enter state 140


State 138

	Stmt -> 'if' '(' Expr ')' Block 'else' . Block      (rule 25)

	'{'            shift, and enter state 31

	Block          goto state 139

State 139

	Stmt -> 'if' '(' Expr ')' Block 'else' Block .      (rule 25)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'boolean'      reduce using rule 25
	'break'        reduce using rule 25
	'continue'     reduce using rule 25
	'false'        reduce using rule 25
	'function'     reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'lambda'       reduce using rule 25
	'print'        reduce using rule 25
	'return'       reduce using rule 25
	'string'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	L_Ident        reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25


State 140

	Lambda -> 'lambda' '<' Type '(' ListArg ')' '>' . Block    (rule 68)

	'{'            shift, and enter state 31

	Block          goto state 141

State 141

	Lambda -> 'lambda' '<' Type '(' ListArg ')' '>' Block .    (rule 68)

	')'            reduce using rule 68
	','            reduce using rule 68
	';'            reduce using rule 68


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 80
Number of terminals: 42
Number of non-terminals: 28
Number of states: 142
