-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Choc.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Choc.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Choc.Abs.Ident -> Result
transIdent x = case x of
  Choc.Abs.Ident string -> failure x

transProgram :: Choc.Abs.Program -> Result
transProgram x = case x of
  Choc.Abs.Program topdefs -> failure x

transTopDef :: Choc.Abs.TopDef -> Result
transTopDef x = case x of
  Choc.Abs.FnDef type_ ident args block -> failure x

transArg :: Choc.Abs.Arg -> Result
transArg x = case x of
  Choc.Abs.ArgNoRef type_ ident -> failure x
  Choc.Abs.ArgRef type_ ident -> failure x

transBlock :: Choc.Abs.Block -> Result
transBlock x = case x of
  Choc.Abs.Block stmts -> failure x

transStmt :: Choc.Abs.Stmt -> Result
transStmt x = case x of
  Choc.Abs.Empty -> failure x
  Choc.Abs.BStmt block -> failure x
  Choc.Abs.Decl type_ items -> failure x
  Choc.Abs.Ass ident expr -> failure x
  Choc.Abs.Incr ident -> failure x
  Choc.Abs.Decr ident -> failure x
  Choc.Abs.Ret expr -> failure x
  Choc.Abs.VRet -> failure x
  Choc.Abs.Cond expr block -> failure x
  Choc.Abs.CondElse expr block1 block2 -> failure x
  Choc.Abs.While expr block -> failure x
  Choc.Abs.SExp expr -> failure x
  Choc.Abs.Break -> failure x
  Choc.Abs.Continue -> failure x
  Choc.Abs.FnNestDef topdef -> failure x
  Choc.Abs.SPrint expr -> failure x

transItem :: Choc.Abs.Item -> Result
transItem x = case x of
  Choc.Abs.NoInit ident -> failure x
  Choc.Abs.Init ident expr -> failure x

transType :: Choc.Abs.Type -> Result
transType x = case x of
  Choc.Abs.Int -> failure x
  Choc.Abs.Str -> failure x
  Choc.Abs.Bool -> failure x
  Choc.Abs.Void -> failure x
  Choc.Abs.Function type_ types -> failure x
  Choc.Abs.Fun type_ types -> failure x

transExpr :: Choc.Abs.Expr -> Result
transExpr x = case x of
  Choc.Abs.EVar ident -> failure x
  Choc.Abs.ELitInt integer -> failure x
  Choc.Abs.ELitTrue -> failure x
  Choc.Abs.ELitFalse -> failure x
  Choc.Abs.EApp ident exprs -> failure x
  Choc.Abs.EString string -> failure x
  Choc.Abs.Neg expr -> failure x
  Choc.Abs.Not expr -> failure x
  Choc.Abs.EMul expr1 mulop expr2 -> failure x
  Choc.Abs.EAdd expr1 addop expr2 -> failure x
  Choc.Abs.ERel expr1 relop expr2 -> failure x
  Choc.Abs.EAnd expr1 expr2 -> failure x
  Choc.Abs.EOr expr1 expr2 -> failure x
  Choc.Abs.ELambda lambda -> failure x

transLambda :: Choc.Abs.Lambda -> Result
transLambda x = case x of
  Choc.Abs.LambdaDef type_ args block -> failure x

transAddOp :: Choc.Abs.AddOp -> Result
transAddOp x = case x of
  Choc.Abs.Plus -> failure x
  Choc.Abs.Minus -> failure x

transMulOp :: Choc.Abs.MulOp -> Result
transMulOp x = case x of
  Choc.Abs.Times -> failure x
  Choc.Abs.Div -> failure x
  Choc.Abs.Mod -> failure x

transRelOp :: Choc.Abs.RelOp -> Result
transRelOp x = case x of
  Choc.Abs.LTH -> failure x
  Choc.Abs.LE -> failure x
  Choc.Abs.GTH -> failure x
  Choc.Abs.GE -> failure x
  Choc.Abs.EQU -> failure x
  Choc.Abs.NE -> failure x
