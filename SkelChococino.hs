-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelChococino where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsChococino

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsChococino.Ident -> Result
transIdent x = case x of
  AbsChococino.Ident string -> failure x

transProgram :: Show a => AbsChococino.Program' a -> Result
transProgram x = case x of
  AbsChococino.Program _ topdefs -> failure x

transTopDef :: Show a => AbsChococino.TopDef' a -> Result
transTopDef x = case x of
  AbsChococino.FnDef _ type_ ident args block -> failure x

transArg :: Show a => AbsChococino.Arg' a -> Result
transArg x = case x of
  AbsChococino.ArgNoRef _ type_ ident -> failure x
  AbsChococino.ArgRef _ type_ ident -> failure x

transBlock :: Show a => AbsChococino.Block' a -> Result
transBlock x = case x of
  AbsChococino.Block _ stmts -> failure x

transStmt :: Show a => AbsChococino.Stmt' a -> Result
transStmt x = case x of
  AbsChococino.Empty _ -> failure x
  AbsChococino.BStmt _ block -> failure x
  AbsChococino.Decl _ type_ items -> failure x
  AbsChococino.Ass _ ident expr -> failure x
  AbsChococino.Incr _ ident -> failure x
  AbsChococino.Decr _ ident -> failure x
  AbsChococino.Ret _ expr -> failure x
  AbsChococino.VRet _ -> failure x
  AbsChococino.Cond _ expr stmt -> failure x
  AbsChococino.CondElse _ expr stmt1 stmt2 -> failure x
  AbsChococino.While _ expr stmt -> failure x
  AbsChococino.SExp _ expr -> failure x

transItem :: Show a => AbsChococino.Item' a -> Result
transItem x = case x of
  AbsChococino.NoInit _ ident -> failure x
  AbsChococino.Init _ ident expr -> failure x

transType :: Show a => AbsChococino.Type' a -> Result
transType x = case x of
  AbsChococino.Int _ -> failure x
  AbsChococino.Str _ -> failure x
  AbsChococino.Bool _ -> failure x
  AbsChococino.Void _ -> failure x
  AbsChococino.Fun _ type_ types -> failure x

transExpr :: Show a => AbsChococino.Expr' a -> Result
transExpr x = case x of
  AbsChococino.EVar _ ident -> failure x
  AbsChococino.ELitInt _ integer -> failure x
  AbsChococino.ELitTrue _ -> failure x
  AbsChococino.ELitFalse _ -> failure x
  AbsChococino.EApp _ ident exprs -> failure x
  AbsChococino.EString _ string -> failure x
  AbsChococino.Neg _ expr -> failure x
  AbsChococino.Not _ expr -> failure x
  AbsChococino.EMul _ expr1 mulop expr2 -> failure x
  AbsChococino.EAdd _ expr1 addop expr2 -> failure x
  AbsChococino.ERel _ expr1 relop expr2 -> failure x
  AbsChococino.EAnd _ expr1 expr2 -> failure x
  AbsChococino.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsChococino.AddOp' a -> Result
transAddOp x = case x of
  AbsChococino.Plus _ -> failure x
  AbsChococino.Minus _ -> failure x

transMulOp :: Show a => AbsChococino.MulOp' a -> Result
transMulOp x = case x of
  AbsChococino.Times _ -> failure x
  AbsChococino.Div _ -> failure x
  AbsChococino.Mod _ -> failure x

transRelOp :: Show a => AbsChococino.RelOp' a -> Result
transRelOp x = case x of
  AbsChococino.LTH _ -> failure x
  AbsChococino.LE _ -> failure x
  AbsChococino.GTH _ -> failure x
  AbsChococino.GE _ -> failure x
  AbsChococino.EQU _ -> failure x
  AbsChococino.NE _ -> failure x
